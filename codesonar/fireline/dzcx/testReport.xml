<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<redline>
<summary src="/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app">
<serial_no>1482045518883</serial_no>
<submitter>tester</submitter>
<reportname>testReport</reportname>
<project_name>test</project_name>
<filenum>318</filenum>
<linenum>70912</linenum>
<starttime>2016-12-18 15:18:38</starttime>
<endtime>2016-12-18 15:19:58</endtime>
<totaltime>1分19秒295毫秒</totaltime>
<blocknum>0</blocknum>
<errornum>20</errornum>
<warningnum>303</warningnum>
<suggestnum>304</suggestnum>
<errorfilenum>0</errorfilenum>
</summary>
<violations>
<violation>
<id>1-25</id>
<rulename>CallSuperLast</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/buildtype/debug/java/com/visionet/dzcx/test/TestMapActivity.java</file>
<class>com.visionet.dzcx.test.TestMapActivity</class>
<position>方法:onPause/n行:96/n</position>
<description>Android中finish(),onDestroy(),onPause(),onSaveInstanceState(),onStop(),onTerminate()这些方法调用super(),应在方法的结尾处调用。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-25</id>
<rulename>CallSuperLast</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/buildtype/debug/java/com/visionet/dzcx/test/TestMapActivity.java</file>
<class>com.visionet.dzcx.test.TestMapActivity</class>
<position>方法:onSaveInstanceState/n行:105/n</position>
<description>Android中finish(),onDestroy(),onPause(),onSaveInstanceState(),onStop(),onTerminate()这些方法调用super(),应在方法的结尾处调用。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-25</id>
<rulename>CallSuperLast</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/buildtype/debug/java/com/visionet/dzcx/test/TestMapActivity.java</file>
<class>com.visionet.dzcx.test.TestMapActivity</class>
<position>方法:onDestroy/n行:114/n</position>
<description>Android中finish(),onDestroy(),onPause(),onSaveInstanceState(),onStop(),onTerminate()这些方法调用super(),应在方法的结尾处调用。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewAirprotinformationActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewAirprotinformationActivity</class>
<position>方法:onPoiSearched/n开始行:86/n结束行:91</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewAlreadyOrderActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewAlreadyOrderActivity</class>
<position>方法:initActionBar/n开始行:145/n结束行:146</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewAlreadyOrderActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewAlreadyOrderActivity</class>
<position>方法:initActionBar/n开始行:150/n结束行:151</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewAlreadyOrderActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewAlreadyOrderActivity</class>
<position>方法:initActionBar/n开始行:155/n结束行:156</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewMainActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewMainActivity</class>
<position>方法:initActionBar/n开始行:237/n结束行:238</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewMainActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewMainActivity</class>
<position>方法:initActionBar/n开始行:250/n结束行:251</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewMainActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewMainActivity</class>
<position>方法:initActionBar/n开始行:262/n结束行:263</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewMainActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewMainActivity</class>
<position>方法:onRegeocodeSearched/n开始行:325/n结束行:328</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewMainActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewMainActivity</class>
<position>方法:onRegeocodeSearched/n开始行:328/n结束行:331</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewMainActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewMainActivity</class>
<position>方法:onRegeocodeSearched/n开始行:348/n结束行:349</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewMainActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewMainActivity</class>
<position>方法:onLocationChanged/n开始行:358/n结束行:360</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewOrderDetailActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewOrderDetailActivity</class>
<position>方法:onClick/n行:141/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onCreate/n行:125/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onLocationChanged/n开始行:184/n结束行:208</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onLocationChanged/n行:194/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-55</id>
<rulename>EmptyStatementNotInLoop</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onLocationChanged/n行:210/n</position>
<description>在一个非for循环或非while循环体中使用的一个空的语句（或者称为一个分号）可能是一个 bug 。也可能是一对分号，这是无用的需要被移除的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onRegeocodeSearched/n行:224/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onRegeocodeSearched/n开始行:258/n结束行:260</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onClick/n开始行:317/n结束行:319</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onClick/n开始行:320/n结束行:322</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onResponseResult/n行:449/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onResponseResult/n开始行:453/n结束行:454</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:DataCommit/n行:491/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:DataCommit/n行:494/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewSendAirportActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewSendAirportActivity</class>
<position>方法:initData/n行:213/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewSendAirportActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewSendAirportActivity</class>
<position>方法:initData/n行:214/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewSendAirportActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewSendAirportActivity</class>
<position>方法:initData/n行:215/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewSendAirportActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewSendAirportActivity</class>
<position>方法:onClick/n行:420/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewSendAirportActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewSendAirportActivity</class>
<position>方法:onDriveRouteSearched/n开始行:527/n结束行:538</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewSendAirportActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewSendAirportActivity</class>
<position>方法:onResponseResult/n行:557/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewSendAirportActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewSendAirportActivity</class>
<position>方法:callCarImmediately/n行:601/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-16</id>
<rulename>AvoidUsingHardCodedIP</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/mengbiao/Time_Select_Activity.java</file>
<class>com.visionet.dazhongcx.ui.mengbiao.Time_Select_Activity</class>
<position>方法:getSettingDateTime/n行:329/n</position>
<description>一个应用中的硬编码 IP将使系统在某些情况下无法发布（例如内网IP暴露）。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/wangwq/NewInformationPopupWindow.java</file>
<class>com.visionet.dazhongcx.ui.wangwq.NewInformationPopupWindow</class>
<position>方法:onTouch/n开始行:63/n结束行:65</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/wangwq/NewOverdueFragment.java</file>
<class>com.visionet.dazhongcx.ui.wangwq.NewOverdueFragment$MyAdapter</class>
<position>方法:onClick/n行:235/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/wuwg/NewFlightOrderDetailActivity.java</file>
<class>com.visionet.dazhongcx.ui.wuwg.NewFlightOrderDetailActivity</class>
<position>方法:initData/n行:198/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-33</id>
<rulename>AppendCharacterWithChar</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/wuwg/NewFlightOrderDetailActivity.java</file>
<class>com.visionet.dazhongcx.ui.wuwg.NewFlightOrderDetailActivity</class>
<position>方法:getCarTypeDes/n行:321/n</position>
<description>用char类型连接字符：在使用StringBuffer的append()方法连接字符时，避免使用string类型。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-33</id>
<rulename>AppendCharacterWithChar</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/wuwg/NewFlightOrderDetailActivity.java</file>
<class>com.visionet.dazhongcx.ui.wuwg.NewFlightOrderDetailActivity</class>
<position>方法:getCarTypeDes/n行:327/n</position>
<description>用char类型连接字符：在使用StringBuffer的append()方法连接字符时，避免使用string类型。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-35</id>
<rulename>UseIndexOfChar</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/wuwg/NewFlightOrderDetailActivity.java</file>
<class>com.visionet.dazhongcx.ui.wuwg.NewFlightOrderDetailActivity</class>
<position>方法:initDriverInfo/n行:385/n</position>
<description>当你检测单个字符的位置时使用String.indexOf(字符)，它执行的很快。不要使用indexOf(字符串)。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/yangqc/NewComplaintActivity.java</file>
<class>com.visionet.dazhongcx.ui.yangqc.NewComplaintActivity</class>
<position>方法:onClick/n开始行:124/n结束行:127</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/yangqc/NewTaxiDriverEvalutionActivity.java</file>
<class>com.visionet.dazhongcx.ui.yangqc.NewTaxiDriverEvalutionActivity</class>
<position>方法:onResponseResult/n行:160/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/yangqc/NewTaxiDriverEvalutionActivity.java</file>
<class>com.visionet.dazhongcx.ui.yangqc.NewTaxiDriverEvalutionActivity</class>
<position>方法:getInfo/n行:199/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/yangqc/NewTaxiDriverEvalutionActivity.java</file>
<class>com.visionet.dazhongcx.ui.yangqc.NewTaxiDriverEvalutionActivity</class>
<position>方法:onResponseResult/n行:301/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/yangqc/NewTaxiDriverEvalutionActivity.java</file>
<class>com.visionet.dazhongcx.ui.yangqc.NewTaxiDriverEvalutionActivity</class>
<position>方法:onClick/n开始行:332/n结束行:336</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx_ckd/wxapi/WXPayEntryActivity.java</file>
<class>com.visionet.dazhongcx_ckd.wxapi.WXPayEntryActivity</class>
<position>方法:handleMessage/n行:79/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx_ckd/wxapi/WXPayEntryActivity.java</file>
<class>com.visionet.dazhongcx_ckd.wxapi.WXPayEntryActivity</class>
<position>方法:onResp/n行:132/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx_ckd/wxapi/WXPayEntryActivity.java</file>
<class>com.visionet.dazhongcx_ckd.wxapi.WXPayEntryActivity</class>
<position>方法:onResp/n行:146/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx_ckd/wxapi/WXPayEntryActivity.java</file>
<class>com.visionet.dazhongcx_ckd.wxapi.WXPayEntryActivity</class>
<position>方法:onResp/n行:152/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/amap/RegeocodeTask.java</file>
<class>com.visionet.dazhongwl.amap.RegeocodeTask</class>
<position>方法:onRegeocodeSearched/n开始行:60/n结束行:70</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:79/n结束行:80</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:84/n结束行:85</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:89/n结束行:90</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:111/n结束行:112</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:119/n结束行:120</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:124/n结束行:125</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:146/n结束行:147</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:154/n结束行:155</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:initActionBar/n开始行:165/n结束行:166</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:onConfigurationChanged/n开始行:188/n结束行:189</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:onConfigurationChanged/n开始行:189/n结束行:190</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-24</id>
<rulename>CallSuperFirst</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseActivity</class>
<position>方法:onResume/n开始行:194/n结束行:198</position>
<description>Android中onCreate(),onConfigurationChanged(),onPostCreate(),onPostResume(),onRestart(),onRestoreInstanceState(),onResume(),onStart()这些方法调用super()方法应在方法的开始处调用。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-55</id>
<rulename>EmptyStatementNotInLoop</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseFragmentActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseFragmentActivity</class>
<position>方法:onCreate/n行:44/n</position>
<description>在一个非for循环或非while循环体中使用的一个空的语句（或者称为一个分号）可能是一个 bug 。也可能是一对分号，这是无用的需要被移除的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-24</id>
<rulename>CallSuperFirst</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/BaseFragmentActivity.java</file>
<class>com.visionet.dazhongwl.base.BaseFragmentActivity</class>
<position>方法:onResume/n开始行:81/n结束行:85</position>
<description>Android中onCreate(),onConfigurationChanged(),onPostCreate(),onPostResume(),onRestart(),onRestoreInstanceState(),onResume(),onStart()这些方法调用super()方法应在方法的开始处调用。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-40</id>
<rulename>UseEqualsToCompareStrings</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/base/data/BaseRespose.java</file>
<class>com.visionet.dazhongwl.base.data.BaseRespose</class>
<position>方法:isSuccess/n行:28/n</position>
<description>使用‘==’或‘！=’比较字符串大小只是比较两边的常量池的引用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>4-4</id>
<rulename>SqlrawQueryRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/database/AddressDBManager.java</file>
<class>com.visionet.dazhongwl.database.AddressDBManager</class>
<position>方法:queryAll/n行:59/n</position>
<description>应该避免使用 SQLiteDatabase.rawQuery()进行查询，而应该使用编译好的参数化语句。使用预编译好的语句比如SQLiteStatement，不仅可以避免SQL注入，而且操作性能上也大幅提高。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>4-4</id>
<rulename>SqlrawQueryRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/database/AddressDBManager2.java</file>
<class>com.visionet.dazhongwl.database.AddressDBManager2</class>
<position>方法:queryAll/n行:61/n</position>
<description>应该避免使用 SQLiteDatabase.rawQuery()进行查询，而应该使用编译好的参数化语句。使用预编译好的语句比如SQLiteStatement，不仅可以避免SQL注入，而且操作性能上也大幅提高。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>4-4</id>
<rulename>SqlrawQueryRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/database/AddressDBManager3.java</file>
<class>com.visionet.dazhongwl.database.AddressDBManager3</class>
<position>方法:queryAll/n行:59/n</position>
<description>应该避免使用 SQLiteDatabase.rawQuery()进行查询，而应该使用编译好的参数化语句。使用预编译好的语句比如SQLiteStatement，不仅可以避免SQL注入，而且操作性能上也大幅提高。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onLocationChanged/n开始行:545/n结束行:559</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onRegeocodeSearched/n开始行:644/n结束行:645</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onResponseResult/n行:655/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onResponseResult/n行:657/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-40</id>
<rulename>UseEqualsToCompareStrings</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:getCarGps/n行:695/n</position>
<description>使用‘==’或‘！=’比较字符串大小只是比较两边的常量池的引用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-40</id>
<rulename>UseEqualsToCompareStrings</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:getCarGps/n行:695/n</position>
<description>使用‘==’或‘！=’比较字符串大小只是比较两边的常量池的引用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onResponseResult/n行:712/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:getCarGps/n行:751/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:getCarGps/n行:753/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:getCarGps/n行:761/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:getCarGps/n行:762/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:798/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:798/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:842/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:849/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1084/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1087/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1090/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1094/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1121/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1124/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1127/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1137/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:Taxisendframe/n行:1140/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1236/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1264/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-36</id>
<rulename>InefficientEmptyStringCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1267/n</position>
<description>用String.trim().length()来判断字符串是否空是低效的做法，因为它会创建一个新的字符串对象然后判断大小。考虑创建一个静态的方法循环String，用isWhitespace()检查每个字符如果遇到非空白字符就返回false。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1268/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-36</id>
<rulename>InefficientEmptyStringCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1271/n</position>
<description>用String.trim().length()来判断字符串是否空是低效的做法，因为它会创建一个新的字符串对象然后判断大小。考虑创建一个静态的方法循环String，用isWhitespace()检查每个字符如果遇到非空白字符就返回false。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1272/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-36</id>
<rulename>InefficientEmptyStringCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1534/n</position>
<description>用String.trim().length()来判断字符串是否空是低效的做法，因为它会创建一个新的字符串对象然后判断大小。考虑创建一个静态的方法循环String，用isWhitespace()检查每个字符如果遇到非空白字符就返回false。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-36</id>
<rulename>InefficientEmptyStringCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onClick/n行:1538/n</position>
<description>用String.trim().length()来判断字符串是否空是低效的做法，因为它会创建一个新的字符串对象然后判断大小。考虑创建一个静态的方法循环String，用isWhitespace()检查每个字符如果遇到非空白字符就返回false。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onResponseResult/n行:1652/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:postData/n行:1738/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:handleMessage/n行:1801/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:onDriveRouteSearched/n开始行:1872/n结束行:1893</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-25</id>
<rulename>CallSuperLast</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onSaveInstanceState/n行:97/n</position>
<description>Android中finish(),onDestroy(),onPause(),onSaveInstanceState(),onStop(),onTerminate()这些方法调用super(),应在方法的结尾处调用。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:init/n行:113/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:initData/n行:166/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onResponseResult/n行:176/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:initData/n行:197/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onClick/n开始行:207/n结束行:209</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onClick/n行:213/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onResponseResult/n行:227/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onResponseResult/n开始行:235/n结束行:236</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onResponseResult/n行:250/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onResponseResult/n行:278/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onResponseResult/n开始行:286/n结束行:287</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:initGPS/n开始行:319/n结束行:320</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onActivityResult/n开始行:382/n结束行:384</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-25</id>
<rulename>CallSuperLast</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onPause/n开始行:406/n结束行:408</position>
<description>Android中finish(),onDestroy(),onPause(),onSaveInstanceState(),onStop(),onTerminate()这些方法调用super(),应在方法的结尾处调用。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-11</id>
<rulename>MisplacedNullCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:handleMessage/n行:421/n</position>
<description>这里的空检查是放错位置的。如果变量为空你将得到一个空指针异常。可能因为检查是无用的或者是不正确的。如：if (!string.equals("") &amp;&amp; string!=null){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:handleMessage/n开始行:441/n结束行:443</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:handleMessage/n行:465/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MainActivity.java</file>
<class>com.visionet.dazhongwl.home.MainActivity</class>
<position>方法:onReceive/n开始行:496/n结束行:498</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MenuFragment.java</file>
<class>com.visionet.dazhongwl.home.MenuFragment</class>
<position>方法:handleMessage/n开始行:66/n结束行:67</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MenuFragment.java</file>
<class>com.visionet.dazhongwl.home.MenuFragment</class>
<position>方法:setData/n行:92/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MenuFragment.java</file>
<class>com.visionet.dazhongwl.home.MenuFragment</class>
<position>方法:setData/n行:103/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MenuFragment.java</file>
<class>com.visionet.dazhongwl.home.MenuFragment</class>
<position>方法:onResponseResult/n行:122/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MenuFragment.java</file>
<class>com.visionet.dazhongwl.home.MenuFragment</class>
<position>方法:onResume/n行:171/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-11</id>
<rulename>MisplacedNullCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MenuFragment.java</file>
<class>com.visionet.dazhongwl.home.MenuFragment</class>
<position>方法:onResume/n行:172/n</position>
<description>这里的空检查是放错位置的。如果变量为空你将得到一个空指针异常。可能因为检查是无用的或者是不正确的。如：if (!string.equals("") &amp;&amp; string!=null){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MyGestureListener.java</file>
<class>com.visionet.dazhongwl.home.MyGestureListener</class>
<position>方法:onFling/n行:56/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/MyGestureListener.java</file>
<class>com.visionet.dazhongwl.home.MyGestureListener</class>
<position>方法:onSingleTapConfirmed/n行:93/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:dispatchMessage/n行:174/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:dispatchMessage/n行:185/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:dispatchMessage/n行:187/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onResponseResult/n行:244/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onResponseResult/n行:301/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onResponseResult/n行:304/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:getTimeData/n行:319/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:init/n行:354/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:init/n行:357/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:init/n行:360/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-16</id>
<rulename>AvoidUsingHardCodedIP</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:init/n行:361/n</position>
<description>一个应用中的硬编码 IP将使系统在某些情况下无法发布（例如内网IP暴露）。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:initDate/n行:437/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onResponseResult/n行:785/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onResponseResult/n行:788/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:postData/n行:853/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:postData/n行:868/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:postData/n行:879/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:getLatlon/n行:887/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:getaddress/n行:896/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onGeocodeSearched/n开始行:905/n结束行:910</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:showTimePop/n行:1002/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:setnp3minSpecial/n行:1064/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:setnp3minSpecial/n行:1085/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:setnp3minSpecial2/n行:1098/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:setnp3minSpecial2/n行:1127/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onValueChange/n行:1192/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-16</id>
<rulename>AvoidUsingHardCodedIP</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:getSettingDateTime/n行:1211/n</position>
<description>一个应用中的硬编码 IP将使系统在某些情况下无法发布（例如内网IP暴露）。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:setMinute/n行:1239/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onDriveRouteSearched/n行:1299/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onDriveRouteSearched/n开始行:1331/n结束行:1333</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onDriveRouteSearched/n开始行:1334/n结束行:1336</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onDriveRouteSearched/n开始行:1336/n结束行:1338</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onDriveRouteSearched/n开始行:1338/n结束行:1339</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onClick/n行:1383/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onClick/n行:1398/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onTouch/n开始行:1410/n结束行:1415</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity</class>
<position>方法:onResponseResult/n行:1445/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/CancelReasonActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.CancelReasonActivity</class>
<position>方法:init/n行:73/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/CancelReasonActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.CancelReasonActivity</class>
<position>方法:onResponseResult/n行:123/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/CancelReasonActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.CancelReasonActivity</class>
<position>方法:PostData/n行:156/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/CancelReasonActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.CancelReasonActivity$MyAdapter</class>
<position>方法:getView/n行:191/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n开始行:178/n结束行:181</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n开始行:184/n结束行:187</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n开始行:187/n结束行:191</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n行:217/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n行:222/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n行:258/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n行:287/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n行:304/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n行:316/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n行:326/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n开始行:330/n结束行:339</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:handleMessage/n开始行:339/n结束行:341</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:init/n行:439/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:init/n行:440/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:init/n行:442/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:initMenu/n行:446/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:initMenu/n行:464/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:initMenu/n行:476/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:confirm/n行:526/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:confirm/n行:532/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:confirm/n行:553/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:confirm/n行:601/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:dialogListener/n行:836/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:getwallet/n行:1066/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:getinvoiceMoney/n行:1122/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:onResponseResult/n行:1127/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:getinvoiceMoney/n行:1139/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity</class>
<position>方法:getinvoiceMoney/n行:1140/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-51</id>
<rulename>EmptyTryBlock</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity$DetailsReceiver</class>
<position>方法:onReceive/n开始行:1150/n结束行:1167</position>
<description>避免空的 try块</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:handleMessage/n行:207/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:handleMessage/n行:215/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:handleMessage/n行:256/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:handleMessage/n行:278/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:handleMessage/n行:286/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:handleMessage/n行:306/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:handleMessage/n行:313/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:init/n行:407/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:init/n行:450/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:init/n行:451/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:init/n行:452/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:onKey/n行:697/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:getIntegral/n行:813/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/ConfirmPaymentActivity2.java</file>
<class>com.visionet.dazhongwl.home.activity.ConfirmPaymentActivity2</class>
<position>方法:getwallet/n行:823/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:dispatchMessage/n行:150/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:dispatchMessage/n行:161/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:getNowTime/n行:195/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:getTimeData/n行:258/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:init/n行:289/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:init/n行:294/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:init/n行:295/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:nowcar/n行:403/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:nowcar/n行:406/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:setRule/n行:530/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onActivityResult/n开始行:632/n结束行:634</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:pathcallback/n行:644/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:pathcallback/n行:646/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:pathcallback/n行:648/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:pathcallback/n行:652/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:pathcallback/n行:654/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onResponseResult/n行:677/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onResponseResult/n行:680/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:postData/n行:771/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:postData/n行:772/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onGeocodeSearched/n开始行:788/n结束行:793</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onDriveRouteSearched/n行:825/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onDriveRouteSearched/n开始行:855/n结束行:857</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onDriveRouteSearched/n开始行:858/n结束行:860</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onDriveRouteSearched/n开始行:860/n结束行:862</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onDriveRouteSearched/n开始行:862/n结束行:865</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onResponseResult/n行:879/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onClick/n行:947/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onClick/n行:962/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity</class>
<position>方法:onTouch/n开始行:974/n结束行:979</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SearchCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SearchCarActivity</class>
<position>方法:initData/n行:62/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SearchCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SearchCarActivity$SearchCarAdapter</class>
<position>方法:getCount/n行:125/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:init/n开始行:208/n结束行:215</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:init/n开始行:209/n结束行:214</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:dispatchMessage/n行:257/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:dispatchMessage/n行:258/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:onItemClick/n行:307/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:onTextChanged/n行:346/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:onActivityResult/n行:516/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectAddress.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectAddress</class>
<position>方法:doSearchQuery/n行:550/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectStartCityActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectStartCityActivity</class>
<position>方法:handleMessage/n行:43/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SelectStartCityActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SelectStartCityActivity$SelectAdapter</class>
<position>方法:getView/n行:135/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:handleMessage/n行:133/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:handleMessage/n行:163/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:handleMessage/n行:164/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:handleMessage/n行:188/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:onResponseResult/n行:328/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:cancelData/n行:349/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:onResponseResult/n行:409/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity$TimeThread</class>
<position>方法:adapterThread/n行:510/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:onLocationChanged/n开始行:644/n结束行:655</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:onResponseResult/n行:700/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity</class>
<position>方法:getCarGps/n行:751/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity$MsgReceiver</class>
<position>方法:onReceive/n开始行:781/n结束行:783</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity$MsgReceiver</class>
<position>方法:onReceive/n开始行:783/n结束行:785</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity$MsgReceiver</class>
<position>方法:onReceive/n开始行:785/n结束行:787</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity$MsgReceiver</class>
<position>方法:onReceive/n开始行:787/n结束行:789</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity$MsgReceiver</class>
<position>方法:onReceive/n开始行:789/n结束行:793</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarActivity$MsgReceiver</class>
<position>方法:onReceive/n开始行:793/n结束行:795</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:263/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:275/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:295/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n开始行:326/n结束行:328</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n开始行:331/n结束行:333</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n开始行:333/n结束行:336</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:389/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:396/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:416/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:433/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:435/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:465/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:handleMessage/n行:478/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onClick/n行:632/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onClick/n行:759/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onClick/n行:982/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onClick/n行:984/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onResponseResult/n行:1016/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:shouqiDriverCollection/n行:1029/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onResponseResult/n行:1050/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getinvoiceMoney/n行:1061/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getinvoiceMoney/n行:1061/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getYuezu/n行:1072/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getYuezu/n行:1073/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getYuezu/n行:1078/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getYuezu/n行:1084/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getYuezu/n行:1089/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onActivityResult/n开始行:1177/n结束行:1214</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getCarGps/n行:1522/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-40</id>
<rulename>UseEqualsToCompareStrings</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getCarGps/n行:1524/n</position>
<description>使用‘==’或‘！=’比较字符串大小只是比较两边的常量池的引用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-40</id>
<rulename>UseEqualsToCompareStrings</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getCarGps/n行:1524/n</position>
<description>使用‘==’或‘！=’比较字符串大小只是比较两边的常量池的引用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:textShared/n行:1679/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:details/n行:1866/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:rewardframe/n行:1876/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onClick/n行:1898/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onClick/n行:1904/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onLocationChanged/n开始行:2141/n结束行:2149</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:getInfo/n行:2239/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onResponseResult/n开始行:2514/n结束行:2515</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:onResponseResult/n行:2530/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:handleMessage/n开始行:156/n结束行:160</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:handleMessage/n开始行:160/n结束行:165</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:handleMessage/n行:177/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:handleMessage/n行:182/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:handleMessage/n行:206/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:init/n行:312/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:init/n行:313/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:init/n行:318/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:init/n行:319/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:init/n行:321/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:confirm/n行:334/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-55</id>
<rulename>EmptyStatementNotInLoop</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:confirm/n行:337/n</position>
<description>在一个非for循环或非while循环体中使用的一个空的语句（或者称为一个分号）可能是一个 bug 。也可能是一对分号，这是无用的需要被移除的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/rewardPaymentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.rewardPaymentActivity</class>
<position>方法:getYuezu/n行:581/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/InvoiceInfoAcivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.InvoiceInfoAcivity</class>
<position>方法:onCreate/n行:31/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/InvoiceInfoAcivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.InvoiceInfoAcivity</class>
<position>方法:onResponseResult/n行:50/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/InvoiceInfoAcivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.InvoiceInfoAcivity</class>
<position>方法:getPostData/n行:74/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/InvoiceListActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.InvoiceListActivity</class>
<position>方法:onItemClick/n行:97/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/InvoiceListActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.InvoiceListActivity</class>
<position>方法:onItemClick/n行:100/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/InvoiceListActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.InvoiceListActivity</class>
<position>方法:onResponseResult/n行:132/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment</class>
<position>方法:init/n行:99/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n行:183/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n行:202/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n行:209/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:234/n结束行:236</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:237/n结束行:240</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:240/n结束行:243</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:243/n结束行:246</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:246/n结束行:249</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_alreadyFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:249/n结束行:253</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment</class>
<position>方法:handleMessage/n行:84/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment</class>
<position>方法:onItemClick/n行:183/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment</class>
<position>方法:onItemClick/n行:193/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment</class>
<position>方法:ChooseInvoiceItem/n行:260/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n行:291/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n行:292/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n行:313/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:347/n结束行:349</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:350/n结束行:353</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:353/n结束行:356</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:356/n结束行:359</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:359/n结束行:362</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:362/n结束行:366</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/ListViewCompat.java</file>
<class>com.visionet.dazhongwl.invoice.activity.ListViewCompat</class>
<position>方法:onTouchEvent/n行:51/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyIncoicePostActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyIncoicePostActivity</class>
<position>方法:handleMessage/n行:61/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyIncoicePostActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyIncoicePostActivity</class>
<position>方法:onDestroy/n行:74/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyIncoicePostActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyIncoicePostActivity</class>
<position>方法:init/n开始行:142/n结束行:144</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyIncoicePostActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyIncoicePostActivity</class>
<position>方法:onResponseResult/n行:244/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyIncoicePostActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyIncoicePostActivity</class>
<position>方法:postData/n行:274/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyIncoicePostActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyIncoicePostActivity</class>
<position>方法:onResponseResult/n行:285/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyIncoiceSHUOMING.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyIncoiceSHUOMING</class>
<position>方法:init/n行:41/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceByJourneyActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceByJourneyActivity</class>
<position>方法:onCreate/n行:81/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceByJourneyActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceByJourneyActivity</class>
<position>方法:setTabSelection/n行:216/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceByJourneyActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceByJourneyActivity</class>
<position>方法:ChooseWhich/n行:281/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceByMoneyActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceByMoneyActivity</class>
<position>方法:onTextChanged/n行:157/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceByMoneyActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceByMoneyActivity</class>
<position>方法:onResponseResult/n行:263/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceByMoneytwoActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceByMoneytwoActivity</class>
<position>方法:init/n开始行:90/n结束行:92</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceByMoneytwoActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceByMoneytwoActivity</class>
<position>方法:onResponseResult/n行:275/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceDefaultActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceDefaultActivity</class>
<position>方法:init/n开始行:89/n结束行:91</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceDefaultActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceDefaultActivity</class>
<position>方法:onResponseResult/n行:119/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceDefaultActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceDefaultActivity$MyAdapter</class>
<position>方法:onClick/n行:199/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceDefaultActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceDefaultActivity$MyAdapter</class>
<position>方法:getView/n行:230/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSetting.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSetting</class>
<position>方法:onResponseResult/n行:126/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSetting.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSetting</class>
<position>方法:postData/n行:147/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSettingList.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSettingList</class>
<position>方法:onResponseResult/n行:98/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSettingList.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSettingList$MyAdapter</class>
<position>方法:getItem/n行:130/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSettingList.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSettingList$MyAdapter</class>
<position>方法:getView/n行:163/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSettingList.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSettingList$MyAdapter</class>
<position>方法:onClick/n行:178/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSettingUpdate.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSettingUpdate</class>
<position>方法:onResponseResult/n行:161/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/MyInvoiceSettingUpdate.java</file>
<class>com.visionet.dazhongwl.invoice.activity.MyInvoiceSettingUpdate</class>
<position>方法:postData/n行:181/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/SlideView.java</file>
<class>com.visionet.dazhongwl.invoice.activity.SlideView</class>
<position>方法:onRequireTouchEvent/n行:88/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/listActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.listActivity</class>
<position>方法:onResponseResult/n行:103/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/listActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.listActivity$SlideAdapter</class>
<position>方法:onResponseResult/n行:195/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/listActivity.java</file>
<class>com.visionet.dazhongwl.invoice.activity.listActivity$SlideAdapter</class>
<position>方法:onClick/n行:214/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/javabean/CityData.java</file>
<class>com.visionet.dazhongwl.javabean.CityData</class>
<position>方法:getSampleContactList/n行:39/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-36</id>
<rulename>InefficientEmptyStringCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/ExampleUtil.java</file>
<class>com.visionet.dazhongwl.jpush.ExampleUtil</class>
<position>方法:isEmpty/n行:31/n</position>
<description>用String.trim().length()来判断字符串是否空是低效的做法，因为它会创建一个新的字符串对象然后判断大小。考虑创建一个静态的方法循环String，用isWhitespace()检查每个字符如果遇到非空白字符就返回false。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/ExampleUtil.java</file>
<class>com.visionet.dazhongwl.jpush.ExampleUtil</class>
<position>方法:getImei/n行:99/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:onReceive/n行:60/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:onReceive/n行:93/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:onReceive/n行:106/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:processCustomMessage/n行:165/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:processCustomMessage/n行:168/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:processCustomMessage/n行:169/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:saveNoticeCars/n行:193/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/jpush/MyReceiver.java</file>
<class>com.visionet.dazhongwl.jpush.MyReceiver</class>
<position>方法:saveNoticeCars/n行:203/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/market/ExchangedActivity.java</file>
<class>com.visionet.dazhongwl.market.ExchangedActivity</class>
<position>方法:onItemClick/n行:70/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/market/ExchangedActivity.java</file>
<class>com.visionet.dazhongwl.market.ExchangedActivity</class>
<position>方法:onResponseResult/n行:89/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/market/MarketActivity.java</file>
<class>com.visionet.dazhongwl.market.MarketActivity</class>
<position>方法:onCreate/n行:95/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-11</id>
<rulename>MisplacedNullCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/market/MarketActivity.java</file>
<class>com.visionet.dazhongwl.market.MarketActivity</class>
<position>方法:onCreate/n行:96/n</position>
<description>这里的空检查是放错位置的。如果变量为空你将得到一个空指针异常。可能因为检查是无用的或者是不正确的。如：if (!string.equals("") &amp;&amp; string!=null){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/market/MarketActivity.java</file>
<class>com.visionet.dazhongwl.market.MarketActivity</class>
<position>方法:onResponseResult/n行:176/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/module/main/ui/widget/MoverView.java</file>
<class>com.visionet.dazhongwl.module.main.ui.widget.MoverView</class>
<position>方法:init/n行:129/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/module/main/ui/widget/MoverView.java</file>
<class>com.visionet.dazhongwl.module.main.ui.widget.MoverView</class>
<position>方法:onResponseResult/n行:237/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/module/main/ui/widget/MoverView.java</file>
<class>com.visionet.dazhongwl.module.main.ui.widget.MoverView</class>
<position>方法:getDate/n行:274/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/module/main/ui/widget/MoverView.java</file>
<class>com.visionet.dazhongwl.module.main.ui.widget.MoverView</class>
<position>方法:getDate/n行:280/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/module/main/ui/widget/MoverView.java</file>
<class>com.visionet.dazhongwl.module.main.ui.widget.MoverView</class>
<position>方法:onActivityResult/n行:446/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/ContactListView.java</file>
<class>com.visionet.dazhongwl.net.ContactListView</class>
<position>方法:draw/n开始行:85/n结束行:86</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/GetUrlPostData.java</file>
<class>com.visionet.dazhongwl.net.GetUrlPostData</class>
<position>方法:onResponseResult/n行:19/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/HanziToPinyin3.java</file>
<class>com.visionet.dazhongwl.net.HanziToPinyin3</class>
<position>方法:getInstance/n行:405/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/HttpRequest.java</file>
<class>com.visionet.dazhongwl.net.HttpRequest</class>
<position>方法:sendPost/n行:131/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/HttpRequestPicture.java</file>
<class>com.visionet.dazhongwl.net.HttpRequestPicture</class>
<position>方法:uploadFile/n行:68/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/HttpRequestPicture.java</file>
<class>com.visionet.dazhongwl.net.HttpRequestPicture</class>
<position>方法:uploadFile/n行:71/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/IndexScroller.java</file>
<class>com.visionet.dazhongwl.net.IndexScroller</class>
<position>方法:onTouchEvent/n开始行:233/n结束行:234</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/UpdateVersion.java</file>
<class>com.visionet.dazhongwl.net.UpdateVersion</class>
<position>方法:showUpdataDialog/n行:58/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/UpdateVersion.java</file>
<class>com.visionet.dazhongwl.net.UpdateVersion</class>
<position>方法:onClick/n行:70/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:dispatchMessage/n行:141/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:dispatchMessage/n行:147/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:dispatchMessage/n行:148/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:dispatchMessage/n行:149/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:dispatchMessage/n行:156/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:init/n行:188/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:init/n行:189/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:init/n行:190/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:init/n行:197/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:onResume/n行:207/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:loginParam/n行:216/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:loginParam/n行:218/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:onResponseResult/n开始行:258/n结束行:260</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-11</id>
<rulename>MisplacedNullCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:onResponseResult/n行:275/n</position>
<description>这里的空检查是放错位置的。如果变量为空你将得到一个空指针异常。可能因为检查是无用的或者是不正确的。如：if (!string.equals("") &amp;&amp; string!=null){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:account/n行:306/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:onResponseResult/n行:350/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:onActivityResult/n行:418/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:onActivityResult/n行:464/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:doTakePhoto/n行:477/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/ComplainActivityy.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.ComplainActivityy</class>
<position>方法:onClick/n行:88/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/ComplainActivityy.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.ComplainActivityy</class>
<position>方法:onClick/n开始行:90/n结束行:94</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/ComplainActivityy.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.ComplainActivityy</class>
<position>方法:onClick/n行:120/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/ComplainActivityy.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.ComplainActivityy</class>
<position>方法:onResponseResult/n行:181/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/ComplainActivityy.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.ComplainActivityy</class>
<position>方法:postData/n行:210/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/DaZhongNoticeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.DaZhongNoticeActivity</class>
<position>方法:onResponseResult/n行:148/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/DaZhongNoticeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.DaZhongNoticeActivity$NoticeAdapter</class>
<position>方法:getView/n行:217/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InsertActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InsertActivity</class>
<position>方法:onClick/n行:222/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InsertActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InsertActivity</class>
<position>方法:onClick/n行:234/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InsertActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InsertActivity</class>
<position>方法:onTouch/n开始行:248/n结束行:250</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InsertActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InsertActivity</class>
<position>方法:onClick/n行:345/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InsertActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InsertActivity</class>
<position>方法:onResponseResult/n行:551/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InsertActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InsertActivity</class>
<position>方法:onResponseResult/n行:583/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InsertAgreementActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InsertAgreementActivity</class>
<position>方法:onDestroy/n行:55/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InvitedCodeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InvitedCodeActivity</class>
<position>方法:onCreate/n行:75/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InvitedCodeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InvitedCodeActivity</class>
<position>方法:textShared/n行:154/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InvitedCodeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InvitedCodeActivity</class>
<position>方法:onResponseResult/n行:193/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MessageCenterActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MessageCenterActivity</class>
<position>方法:handleMessage/n行:55/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MessageCenterActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MessageCenterActivity$MessageAdapter</class>
<position>方法:getView/n行:210/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCostActivty.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCostActivty</class>
<position>方法:handleMessage/n开始行:99/n结束行:104</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCostActivty.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCostActivty</class>
<position>方法:init/n行:184/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCostActivty.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCostActivty</class>
<position>方法:OrderlistParam/n行:256/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCostActivty.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCostActivty$MyAdapter</class>
<position>方法:onClick/n行:355/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_newActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_newActivity</class>
<position>方法:onCreate/n行:31/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_newActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_newActivity</class>
<position>方法:setTabSelection/n行:113/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_alreadyFragment</class>
<position>方法:handleMessage/n行:70/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_alreadyFragment</class>
<position>方法:OrderlistParam/n行:170/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_alreadyFragment.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_alreadyFragment$MyAdapter</class>
<position>方法:onClick/n行:255/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_detailsActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_detailsActivity</class>
<position>方法:handleMessage/n行:73/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_detailsActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_detailsActivity$MyAdapter</class>
<position>方法:getView/n行:246/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_detailsActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_detailsActivity$MyAdapter</class>
<position>方法:getView/n行:249/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_noneFragment.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_noneFragment</class>
<position>方法:handleMessage/n行:76/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_noneFragment.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_noneFragment</class>
<position>方法:init/n行:120/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_new_noneFragment.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_new_noneFragment$MyAdapter</class>
<position>方法:onClick/n行:261/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCost_twoActivty.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCost_twoActivty$MyAdapter</class>
<position>方法:onClick/n行:276/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyIntegralActivity_two.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyIntegralActivity_two</class>
<position>方法:onResponseResult/n行:160/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-51</id>
<rulename>EmptyTryBlock</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyIntegralActivity_two.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyIntegralActivity_two</class>
<position>方法:onResponseResult/n开始行:165/n结束行:170</position>
<description>避免空的 try块</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyRemainActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyRemainActivity</class>
<position>方法:handleMessage/n行:63/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyRemainActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyRemainActivity</class>
<position>方法:onResponseResult/n行:158/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyRemainActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyRemainActivity$MyAdapter</class>
<position>方法:getView/n行:219/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyRemainActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyRemainActivity$MyAdapter</class>
<position>方法:getView/n行:221/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyVirtualActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyVirtualActivity</class>
<position>方法:onResponseResult/n行:134/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyWalletActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyWalletActivity</class>
<position>方法:setData/n行:74/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyWalletActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyWalletActivity</class>
<position>方法:onResponseResult/n行:211/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyWalletActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyWalletActivity</class>
<position>方法:initData/n行:231/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NoticeDetailsActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NoticeDetailsActivity</class>
<position>方法:onCreate/n行:50/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity</class>
<position>方法:onReceive/n行:101/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity</class>
<position>方法:onReceive/n行:103/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity$OrderListAdapter</class>
<position>方法:getView/n行:273/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity$OrderListAdapter</class>
<position>方法:getView/n行:286/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity$OrderListAdapter</class>
<position>方法:getView/n开始行:336/n结束行:340</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity$OrderListAdapter</class>
<position>方法:onClick/n开始行:375/n结束行:376</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity2.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity2</class>
<position>方法:dispatchMessage/n行:72/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity2.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity2</class>
<position>方法:initActionBar/n开始行:178/n结束行:179</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity2.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity2</class>
<position>方法:initActionBar/n开始行:183/n结束行:184</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity2.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity2</class>
<position>方法:initActionBar/n开始行:189/n结束行:191</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/NowCarRecordActivity2.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.NowCarRecordActivity2</class>
<position>方法:initActionBar/n开始行:195/n结束行:196</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onCreate/n行:81/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onCreate/n行:83/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onClick/n行:159/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onClick/n行:160/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onRatingChanged/n行:192/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onClick/n行:217/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onClick/n开始行:466/n结束行:470</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onClick/n行:482/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onResponseResult/n行:510/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:getData/n行:591/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:onResponseResult/n行:601/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/OrderDetailActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.OrderDetailActivity</class>
<position>方法:initPingjia/n行:663/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-35</id>
<rulename>UseIndexOfChar</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PayResult.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PayResult</class>
<position>方法:gatValue/n行:38/n</position>
<description>当你检测单个字符的位置时使用String.indexOf(字符)，它执行的很快。不要使用indexOf(字符串)。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PersonInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PersonInformationActivity</class>
<position>方法:init/n行:70/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PersonInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PersonInformationActivity</class>
<position>方法:init/n行:71/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PersonInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PersonInformationActivity</class>
<position>方法:init/n行:72/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PersonInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PersonInformationActivity</class>
<position>方法:init/n行:79/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-11</id>
<rulename>MisplacedNullCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PersonInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PersonInformationActivity</class>
<position>方法:init/n行:80/n</position>
<description>这里的空检查是放错位置的。如果变量为空你将得到一个空指针异常。可能因为检查是无用的或者是不正确的。如：if (!string.equals("") &amp;&amp; string!=null){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PostedInvoiceActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PostedInvoiceActivity</class>
<position>方法:onCreate/n行:49/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PostedInvoiceActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PostedInvoiceActivity</class>
<position>方法:onResponseResult/n行:101/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/PostedInvoiceActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.PostedInvoiceActivity</class>
<position>方法:getDate/n行:146/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/SuggesAndFeedback.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.SuggesAndFeedback</class>
<position>方法:onClick/n行:83/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/SuggesDescriptionActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.SuggesDescriptionActivity</class>
<position>方法:init/n开始行:79/n结束行:81</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/SuggesListHistory.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.SuggesListHistory</class>
<position>方法:handleMessage/n行:60/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/SuggesListHistory.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.SuggesListHistory</class>
<position>方法:onItemClick/n行:124/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/UserAucherizedActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.UserAucherizedActivity</class>
<position>方法:onResponseResult/n行:274/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/UserGradeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.UserGradeActivity</class>
<position>方法:initData/n行:62/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/UserGradeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.UserGradeActivity</class>
<position>方法:init/n行:82/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-11</id>
<rulename>MisplacedNullCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/UserGradeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.UserGradeActivity</class>
<position>方法:init/n行:83/n</position>
<description>这里的空检查是放错位置的。如果变量为空你将得到一个空指针异常。可能因为检查是无用的或者是不正确的。如：if (!string.equals("") &amp;&amp; string!=null){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/driverImformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.driverImformationActivity</class>
<position>方法:onResponseResult/n行:58/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/test/dd.java</file>
<class>com.visionet.dazhongwl.test.dd</class>
<position>方法:onCreate/n行:38/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/AllListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.AllListFragment</class>
<position>方法:handleMessage/n行:64/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/AllListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.AllListFragment</class>
<position>方法:init/n行:115/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/AllListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.AllListFragment$orderlistAdapter</class>
<position>方法:getView/n行:233/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/AllListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.AllListFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:276/n结束行:280</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/AllListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.AllListFragment$orderlistAdapter</class>
<position>方法:onClick/n行:287/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/AllListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.AllListFragment</class>
<position>方法:RefreshFragment/n行:352/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/CanceledListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.CanceledListFragment</class>
<position>方法:handleMessage/n行:65/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/CanceledListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.CanceledListFragment$orderlistAdapter</class>
<position>方法:getView/n行:238/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/CanceledListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.CanceledListFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:279/n结束行:283</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/CanceledListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.CanceledListFragment$orderlistAdapter</class>
<position>方法:onClick/n行:302/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/CanceledListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.CanceledListFragment$orderlistAdapter</class>
<position>方法:onClick/n开始行:319/n结束行:320</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/CanceledListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.CanceledListFragment</class>
<position>方法:RefreshFragment/n行:355/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/FinishedListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.FinishedListFragment</class>
<position>方法:handleMessage/n行:63/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/FinishedListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.FinishedListFragment$orderlistAdapter</class>
<position>方法:getView/n行:236/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/FinishedListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.FinishedListFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:277/n结束行:281</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/FinishedListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.FinishedListFragment$orderlistAdapter</class>
<position>方法:onClick/n行:300/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/FinishedListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.FinishedListFragment$orderlistAdapter</class>
<position>方法:onClick/n开始行:317/n结束行:318</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/UnderwayListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.UnderwayListFragment</class>
<position>方法:handleMessage/n行:63/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/UnderwayListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.UnderwayListFragment</class>
<position>方法:init/n行:118/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/UnderwayListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.UnderwayListFragment$orderlistAdapter</class>
<position>方法:getView/n行:236/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/UnderwayListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.UnderwayListFragment$orderlistAdapter</class>
<position>方法:getView/n开始行:277/n结束行:281</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/UnderwayListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.UnderwayListFragment$orderlistAdapter</class>
<position>方法:onClick/n行:299/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/UnderwayListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.UnderwayListFragment$orderlistAdapter</class>
<position>方法:onClick/n开始行:316/n结束行:317</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/ui/fragment/UnderwayListFragment.java</file>
<class>com.visionet.dazhongwl.ui.fragment.UnderwayListFragment</class>
<position>方法:RefreshFragment/n行:352/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/LoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.LoginActivity</class>
<position>方法:handleMessage/n行:65/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/LoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.LoginActivity</class>
<position>方法:handleMessage/n行:83/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/LoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.LoginActivity</class>
<position>方法:getLoginParam/n行:161/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/LoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.LoginActivity</class>
<position>方法:goLogin/n行:171/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/LoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.LoginActivity$LogAsync</class>
<position>方法:doInBackground/n行:187/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/LoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.LoginActivity$LogAsync</class>
<position>方法:doInBackground/n行:189/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/MessageLoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.MessageLoginActivity</class>
<position>方法:handleMessage/n行:87/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/MessageLoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.MessageLoginActivity</class>
<position>方法:init/n开始行:175/n结束行:177</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/MessageLoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.MessageLoginActivity</class>
<position>方法:onClick/n行:238/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/MessageLoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.MessageLoginActivity</class>
<position>方法:onClick/n开始行:282/n结束行:284</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/MessageLoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.MessageLoginActivity</class>
<position>方法:goRegister/n行:355/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/MessageLoginActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.MessageLoginActivity</class>
<position>方法:registerParam/n行:411/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/RegisterActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.RegisterActivity</class>
<position>方法:onClick/n行:109/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/RegisterActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.RegisterActivity</class>
<position>方法:goRegister/n行:179/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/RegisterActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.RegisterActivity</class>
<position>方法:registerParam/n行:233/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/RevisePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.RevisePasswordActivity</class>
<position>方法:initData/n行:77/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/RevisePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.RevisePasswordActivity</class>
<position>方法:onClick/n行:91/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/RevisePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.RevisePasswordActivity</class>
<position>方法:goRegister/n行:134/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/RevisePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.RevisePasswordActivity</class>
<position>方法:goRegister/n行:142/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/SplashActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.SplashActivity</class>
<position>方法:getAdTask/n行:236/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/SplashActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.SplashActivity</class>
<position>方法:dispatchMessage/n行:351/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-11</id>
<rulename>MisplacedNullCheck</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/SplashActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.SplashActivity</class>
<position>方法:dispatchMessage/n行:400/n</position>
<description>这里的空检查是放错位置的。如果变量为空你将得到一个空指针异常。可能因为检查是无用的或者是不正确的。如：if (!string.equals("") &amp;&amp; string!=null){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/UpdatePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.UpdatePasswordActivity</class>
<position>方法:initData/n行:76/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/UpdatePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.UpdatePasswordActivity</class>
<position>方法:onClick/n行:90/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/UpdatePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.UpdatePasswordActivity</class>
<position>方法:goRegister/n行:133/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/usercenter/UpdatePasswordActivity.java</file>
<class>com.visionet.dazhongwl.usercenter.UpdatePasswordActivity</class>
<position>方法:goRegister/n行:141/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-35</id>
<rulename>UseIndexOfChar</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/AppUtil.java</file>
<class>com.visionet.dazhongwl.utils.AppUtil</class>
<position>方法:getFileName/n行:245/n</position>
<description>当你检测单个字符的位置时使用String.indexOf(字符)，它执行的很快。不要使用indexOf(字符串)。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-14</id>
<rulename>BigIntegerInstantiation</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/Arith.java</file>
<class>com.visionet.dazhongwl.utils.Arith</class>
<position>方法:round/n行:111/n</position>
<description>不要创建已经存在的 BigInteger类型的实例，
					（如 BigInteger.ZERO,BigInteger.ONE ） , 对于 JDK.1.5 以上， BigInteger.TEN BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/ClientUtils.java</file>
<class>com.visionet.dazhongwl.utils.ClientUtils</class>
<position>方法:totalRAM/n行:291/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-40</id>
<rulename>UseEqualsToCompareStrings</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/FormatUtil.java</file>
<class>com.visionet.dazhongwl.utils.FormatUtil</class>
<position>方法:Formatstring/n行:5/n</position>
<description>使用‘==’或‘！=’比较字符串大小只是比较两边的常量池的引用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-8</id>
<rulename>CollapsibleIfStatements</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/GetNowLocation.java</file>
<class>com.visionet.dazhongwl.utils.GetNowLocation</class>
<position>方法:onLocationChanged/n开始行:73/n结束行:82</position>
<description>有时候两个if语句可以通过逻辑操作符分隔条件表达式组合成一条语句。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/MyDateUtils.java</file>
<class>com.visionet.dazhongwl.utils.MyDateUtils</class>
<position>方法:stringToLong/n行:36/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-33</id>
<rulename>AppendCharacterWithChar</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/PasswordUtil.java</file>
<class>com.visionet.dazhongwl.utils.PasswordUtil</class>
<position>方法:generate/n行:27/n</position>
<description>用char类型连接字符：在使用StringBuffer的append()方法连接字符时，避免使用string类型。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-33</id>
<rulename>AppendCharacterWithChar</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/PasswordUtil.java</file>
<class>com.visionet.dazhongwl.utils.PasswordUtil</class>
<position>方法:generate/n行:51/n</position>
<description>用char类型连接字符：在使用StringBuffer的append()方法连接字符时，避免使用string类型。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/UserService.java</file>
<class>com.visionet.dazhongwl.utils.UserService</class>
<position>方法:onLoginStatus/n开始行:48/n结束行:50</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/YXUtils.java</file>
<class>com.visionet.dazhongwl.utils.YXUtils</class>
<position>方法:packUp/n开始行:31/n结束行:33</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/view/DownLoadVersionActivity.java</file>
<class>com.visionet.dazhongwl.view.DownLoadVersionActivity</class>
<position>方法:init/n行:68/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuLayout.java</file>
<class>com.visionet.util.SwipeMenuLayout</class>
<position>方法:setMenuHeight/n行:296/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onFling/n行:72/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-27</id>
<rulename>AvoidDuplicateLiterals</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onFling/n行:72/n</position>
<description>代码包含重复的字符串常常可以重构为将此字符串声明为常量。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onScroll/n行:85/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>1-49</id>
<rulename>EmptyIfStmt</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onScroll/n开始行:86/n结束行:87</position>
<description>发现使用 if 进行了条件判断，但是判断之后没做任何处理。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onInterceptTouchEvent/n行:113/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onInterceptTouchEvent/n行:163/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onInterceptTouchEvent/n行:175/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>3-3</id>
<rulename>LogOnOffRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuListView.java</file>
<class>com.visionet.util.SwipeMenuListView</class>
<position>方法:onInterceptTouchEvent/n行:179/n</position>
<description>建议使用if(DEBUG)包裹Log方法,日志开关不要封装在日志函数中。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>4-12</id>
<rulename>AllowBackupRule</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/AndroidManifest.xml</file>
<class>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/AndroidManifest.xml</class>
<position>行:/n</position>
<description>建议将AndroidMannifest.xml文件android:allowBackup属性设置为false。当allowBackup标志值为true时，攻击者可通过adb backup和adb restore来备份和恢复应用程序数据。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-22</id>
<rulename>NP_UNWRITTEN_FIELD</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewAlreadyOrderActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewAlreadyOrderActivity</class>
<position>方法:Listener/n行:117/n</position>
<description>程序关联字段未写入非空的值,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-22</id>
<rulename>NP_UNWRITTEN_FIELD</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewAlreadyOrderActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewAlreadyOrderActivity</class>
<position>方法:Listener/n行:51/n</position>
<description>程序关联字段未写入非空的值,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-22</id>
<rulename>NP_UNWRITTEN_FIELD</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onCreate/n行:127/n</position>
<description>程序关联字段未写入非空的值,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-22</id>
<rulename>NP_UNWRITTEN_FIELD</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveActivity</class>
<position>方法:onRegeocodeSearched/n开始行:224/n结束行:264</position>
<description>程序关联字段未写入非空的值,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-15</id>
<rulename>NP_NULL_ON_SOME_PATH</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongcx/ui/gefei/NewRemoveDetailActivity.java</file>
<class>com.visionet.dazhongcx.ui.gefei.NewRemoveDetailActivity</class>
<position>方法:getPhoneContacts/n开始行:107/n结束行:126</position>
<description>分支语句存在空指针引用,该语句执行时会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-15</id>
<rulename>NP_NULL_ON_SOME_PATH</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/component/image/glide/GlideImageLoaderStrategy.java</file>
<class>com.visionet.dazhongwl.component.image.glide.GlideImageLoaderStrategy</class>
<position>方法:loadImage/n开始行:79/n结束行:169</position>
<description>分支语句存在空指针引用,该语句执行时会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-16</id>
<rulename>NP_NULL_ON_SOME_PATH_EXCEPTION</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/ContentFragment.java</file>
<class>com.visionet.dazhongwl.home.ContentFragment</class>
<position>方法:returnBitmap/n开始行:662/n结束行:679</position>
<description>异常路径存在空指针引用,执行时可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-17</id>
<rulename>NP_NULL_PARAM_DEREF</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/AppointmentActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.AppointmentActivity$2</class>
<position>方法:onResponseResult/n开始行:238/n结束行:316</position>
<description>该方法给一个非空的方法参数传递空值,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-17</id>
<rulename>NP_NULL_PARAM_DEREF</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/NowCarActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.NowCarActivity$2</class>
<position>方法:onResponseResult/n开始行:204/n结束行:255</position>
<description>该方法给一个非空的方法参数传递空值,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-16</id>
<rulename>NP_NULL_ON_SOME_PATH_EXCEPTION</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/home/activity/SingleCarDetailsActivity.java</file>
<class>com.visionet.dazhongwl.home.activity.SingleCarDetailsActivity</class>
<position>方法:returnBitmap/n开始行:2542/n结束行:2559</position>
<description>异常路径存在空指针引用,执行时可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-15</id>
<rulename>NP_NULL_ON_SOME_PATH</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/invoice/activity/Invoice_by_journey_noneFragment.java</file>
<class>com.visionet.dazhongwl.invoice.activity.Invoice_by_journey_noneFragment$1</class>
<position>方法:handleMessage/n开始行:81/n结束行:112</position>
<description>分支语句存在空指针引用,该语句执行时会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-15</id>
<rulename>NP_NULL_ON_SOME_PATH</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/market/ExchangedActivity.java</file>
<class>com.visionet.dazhongwl.market.ExchangedActivity$2</class>
<position>方法:onResponseResult/n开始行:87/n结束行:116</position>
<description>分支语句存在空指针引用,该语句执行时会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>2-12</id>
<rulename>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/DownLoadManager.java</file>
<class>com.visionet.dazhongwl.net.DownLoadManager</class>
<position>方法:getFileFromServer/n开始行:25/n结束行:49</position>
<description>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>2-12</id>
<rulename>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/HttpRequestPicture.java</file>
<class>com.visionet.dazhongwl.net.HttpRequestPicture</class>
<position>方法:uploadFile/n开始行:24/n结束行:82</position>
<description>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-16</id>
<rulename>NP_NULL_ON_SOME_PATH_EXCEPTION</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/Url.java</file>
<class>com.visionet.dazhongwl.net.Url</class>
<position>方法:uploadFile/n开始行:12/n结束行:56</position>
<description>异常路径存在空指针引用,执行时可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>2-12</id>
<rulename>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/net/Url.java</file>
<class>com.visionet.dazhongwl.net.Url</class>
<position>方法:uploadFile/n开始行:12/n结束行:56</position>
<description>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-10</id>
<rulename>NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:getFile/n开始行:530/n结束行:558</position>
<description>异常路径上的分支语句运行时会生成空对象,该对象被引用可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>2-12</id>
<rulename>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/AccountInformationActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.AccountInformationActivity</class>
<position>方法:getFile/n开始行:530/n结束行:558</position>
<description>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-16</id>
<rulename>NP_NULL_ON_SOME_PATH_EXCEPTION</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/InvitedCodeActivity.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.InvitedCodeActivity</class>
<position>方法:returnBitmap/n开始行:115/n结束行:132</position>
<description>异常路径存在空指针引用,执行时可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-15</id>
<rulename>NP_NULL_ON_SOME_PATH</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyExcellentCostActivty.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyExcellentCostActivty$1</class>
<position>方法:handleMessage/n开始行:77/n结束行:131</position>
<description>分支语句存在空指针引用,该语句执行时会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-5</id>
<rulename>NP_ALWAYS_NULL</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/slidingmenu/activity/MyIntegralActivity_two.java</file>
<class>com.visionet.dazhongwl.slidingmenu.activity.MyIntegralActivity_two$1</class>
<position>方法:handleMessage/n行:77/n</position>
<description>此位置存在空指针引用,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-16</id>
<rulename>NP_NULL_ON_SOME_PATH_EXCEPTION</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/AsyncLoadPic.java</file>
<class>com.visionet.dazhongwl.utils.AsyncLoadPic$AsyPitcure</class>
<position>方法:doInBackground/n开始行:28/n结束行:51</position>
<description>异常路径存在空指针引用,执行时可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-15</id>
<rulename>NP_NULL_ON_SOME_PATH</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/BitmapTools.java</file>
<class>com.visionet.dazhongwl.utils.BitmapTools</class>
<position>方法:saveBitmap/n开始行:74/n结束行:97</position>
<description>分支语句存在空指针引用,该语句执行时会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>2-12</id>
<rulename>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/BitmapTools.java</file>
<class>com.visionet.dazhongwl.utils.BitmapTools</class>
<position>方法:saveBitmap/n开始行:74/n结束行:97</position>
<description>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-24</id>
<rulename>NP_DEREFERENCE_OF_READLINE_VALUE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/ClientUtils.java</file>
<class>com.visionet.dazhongwl.utils.ClientUtils</class>
<position>方法:getCpuName/n行:240/n</position>
<description>引用readLine()结果时没有进行非空校验,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>5-24</id>
<rulename>NP_DEREFERENCE_OF_READLINE_VALUE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/ClientUtils.java</file>
<class>com.visionet.dazhongwl.utils.ClientUtils</class>
<position>方法:totalRAM/n行:289/n</position>
<description>引用readLine()结果时没有进行非空校验,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>2-9</id>
<rulename>OS_OPEN_STREAM</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/ClientUtils.java</file>
<class>com.visionet.dazhongwl.utils.ClientUtils</class>
<position>方法:getCpuName/n行:238/n</position>
<description>使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>2-9</id>
<rulename>OS_OPEN_STREAM</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/ClientUtils.java</file>
<class>com.visionet.dazhongwl.utils.ClientUtils</class>
<position>方法:totalRAM/n行:286/n</position>
<description>使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-16</id>
<rulename>NP_NULL_ON_SOME_PATH_EXCEPTION</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/utils/SetPicture.java</file>
<class>com.visionet.dazhongwl.utils.SetPicture$AsyPitcure</class>
<position>方法:doInBackground/n开始行:30/n结束行:53</position>
<description>异常路径存在空指针引用,执行时可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
<violation>
<id>2-12</id>
<rulename>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/dazhongwl/view/DownLoadVersionActivity.java</file>
<class>com.visionet.dazhongwl.view.DownLoadVersionActivity</class>
<position>方法:getFileFrom/n开始行:119/n结束行:145</position>
<description>OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</violation>
<violation>
<id>5-26</id>
<rulename>NP_LOAD_OF_KNOWN_NULL_VALUE</rulename>
<file>/Users/sj/WorkSpace/gitlab_dz/DaZhongCX_CK/app/src/main/java/com/visionet/util/SwipeMenuAdapter.java</file>
<class>com.visionet.util.SwipeMenuAdapter</class>
<position>方法:getView/n行:51/n</position>
<description>已经检查出为空的值仍被继续引用。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</violation>
</violations>
<passes>
<pass>
<id>5-11</id>
<rulename>NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR</rulename>
<description>标记为非空的字段没有初始化,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-23</id>
<rulename>NP_SYNC_AND_NULL_CHECK_FIELD</rulename>
<description>使用同一个字段进行同步和非空检查,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-31</id>
<rulename>NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE</rulename>
<description>应该为非空的参数被标记为可为空,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-21</id>
<rulename>NP_STORE_INTO_NONNULL_FIELD</rulename>
<description>注释为@Nonnull的字段存进了可能为空的对象,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-3</id>
<rulename>NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT</rulename>
<description>使用object.equals()方法时没有对object进行为空校验,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-9</id>
<rulename>NP_GUARANTEED_DEREF</rulename>
<description>分支语句运行时会生成空对象,该对象被引用可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-7</id>
<rulename>NP_ARGUMENT_MIGHT_BE_NULL</rulename>
<description>方法的参数在引用前没有进行为空校验,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-27</id>
<rulename>NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION</rulename>
<description>重写后的方法应保持与被重写方法的参数一致性,比如把@Nullable的参数重写后设置为@Nonnull,这是不合理的。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-13</id>
<rulename>NP_NONNULL_RETURN_VIOLATION</rulename>
<description>标记为@Nonnull的方法可能返回null,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-25</id>
<rulename>NP_IMMEDIATE_DEREFERENCE_OF_READLINE</rulename>
<description>readLine()结果被立即引用,如果没有行进行读取了,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-19</id>
<rulename>NP_NULL_PARAM_DEREF_NONVIRTUAL</rulename>
<description>给一个非空的方法参数传递一个可能为空的值,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-29</id>
<rulename>NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE</rulename>
<description>应该检查是否为空的方法返回值没有进行为空检查,可能 会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-30</id>
<rulename>NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE</rulename>
<description>分支路径存在空指针引用,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-12</id>
<rulename>NP_NONNULL_PARAM_VIOLATION</rulename>
<description>该方法给一个非空参数传了空值,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-20</id>
<rulename>NP_OPTIONAL_RETURN_NULL</rulename>
<description>使用java.util.Optional或者 com.google.common.base.Optiona类时,返回空值可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-32</id>
<rulename>NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD</rulename>
<description>程序引用的公有的或者私有的字段没有被写入非空值,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-4</id>
<rulename>NP_TOSTRING_COULD_RETURN_NULL</rulename>
<description>此位置使用toString方法可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-2</id>
<rulename>NP_CLONE_COULD_RETURN_NULL</rulename>
<description>克隆的方法的可能返回null。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-8</id>
<rulename>NP_CLOSING_NULL</rulename>
<description>执行close()方法的对象为空,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-6</id>
<rulename>NP_ALWAYS_NULL_EXCEPTION</rulename>
<description>方法的异常处理过程存在空指针引用,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-1</id>
<rulename>NP_BOOLEAN_RETURN_NULL</rulename>
<description>方法的布尔返回值为null,会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-14</id>
<rulename>NP_NULL_INSTANCEOF</rulename>
<description>使用instance of方法判断为空对象的type,可能会导致空指针异常。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-28</id>
<rulename>NP_METHOD_RETURN_RELAXING_ANNOTATION</rulename>
<description>重写后的方法应保持与被重写方法的参数一致性,比如把@Nonnull的参数重写后设置为@Nullable或者@CheckForNull,这是不合理的。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>5-18</id>
<rulename>NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS</rulename>
<description>从外部传进的参数存在为空的可能,而使用该参数的方法要求该参数不能为空。</description>
<ruletype>空指针</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-41</id>
<rulename>WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL</rulename>
<description>实例的方法中同步this.getClass()，如果这个类有子类集合，那么子类集合中的对象将会在这个类的各个子类上进行同步，这不是我们想要的效果，我们只要同步当前的类对象而不包含它的所有子类，可以同步类名.getClass()。例如，java.awt.Label的代码：
			 private static final String base = "label";
			 private static int nameCounter = 0;
			 String constructComponentName() {
				synchronized (getClass()) {
					return base + nameCounter++;
				}
			 }
			 Label中的子类集合不可能在同一个子对象上进行同步，替换上面的方法为：
			 private static final String base = "label";
			 private static int nameCounter = 0;
			 String constructComponentName() {
				synchronized (Label.class) { 
					return base + nameCounter++;
				}
			 }</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-31</id>
<rulename>STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE</rulename>
<description>在官方的JavaDoc，DateFormats多线程使用本身就是不安全的。建议的方法是在做日期转换之前，为DateFormat对象加锁或者使用ThreadLocal变量去容纳DateFormat对象，也就是说每个线程都有一个属于自己的副本，并无需等待其他线程去释放它。这种方法会比使用同步块更高效。。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-23</id>
<rulename>NP_SYNC_AND_NULL_CHECK_FIELD</rulename>
<description>如果代码块是同步的，那么久不可能为空。如果是空，同步时就会抛出NullPointerException异常。最好是在另一个代码块中进行同步。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-13</id>
<rulename>JLM_JSR166_LOCK_MONITORENTER</rulename>
<description>实现java.util.concurrent.locks.Lock的对象调用了同步的方法。应该这样处理，对象被锁定/解锁时使用acquire（）/release（）方法而不是使用同步的方法。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-35</id>
<rulename>UG_SYNC_SET_UNSYNC_GET</rulename>
<description>这个类包含类似命名的get和set方法。在set方法是同步方法和get方法是非同步方法。这可能会导致在运行时的不正确行为，因为调用的get方法不一定返回对象一致状态。 GET方法应该同步。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-21</id>
<rulename>MWN_MISMATCHED_NOTIFY</rulename>
<description>此方法调用Object.notify()或Object.notifyAll()而没有获取到该对象的对象锁。调用notify()或notifyAll()而没有持有该对象的对象锁，将导致IllegalMonitorStateException异常。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-43</id>
<rulename>WA_AWAIT_NOT_IN_LOOP</rulename>
<description>方法没有在循环中调用java.util.concurrent.await()。如果对象是用于多种条件，打算调用wait()方法的条件可能不是实际发生的。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-11</id>
<rulename>IS2_INCONSISTENT_SYNC</rulename>
<description>同步存在一致性问题。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-33</id>
<rulename>STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE</rulename>
<description>在多线程中本身就是不安全的，如果在线程范围中共享一个DateFormat的实例而不使用一个同步的方法在应用中就会出现一些问题。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-5</id>
<rulename>DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE</rulename>
<description>该代码同步一个封装的原始常量，例如一个Integer类型。
				private static Integer count = 0;
				...
				  synchronized(count) {
					 count++;
					 }
				...
				由于Integer对象可以共享和保存，此代码可能是同步的其他无关的代码中相同的对象，这时会导致反应迟钝和可能死锁</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-3</id>
<rulename>DC_PARTIALLY_CONSTRUCTED</rulename>
<description>使用double-checked locking进行lazy field initialization（延迟初始化）可能会存在问题，比如实例化对象在执行的时候会分为三步：分配内存，调用构造函数初始化，指向分配的内存，但是顺序不是固定的。如果在执行第二步的时候另外一个线程进入，发现对象非空则直接使用，则在后续会产生问题。在jdk5之后（包含JDK5）之后，可以使用volatile限制来定义instance，能够避免double-checked locking。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-9</id>
<rulename>DM_USELESS_THREAD</rulename>
<description>这个方法没有通过run方法或者具体声明Thread类，也没有通过一个Runnable对象去定义一个线程，而这个线程出来浪费资源却什么也没有去做。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-7</id>
<rulename>DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE</rulename>
<description>同步一个显然不是共有封装的原始值，例如一个Integer类型的对象。
				private static final Integer fileLock = new Integer(1);
				...
				  synchronized(fileLock) {
					 .. do something ..
					 }
				...
				对于上述代码中，fileLock对象被重新声明为下面这样会更好一些：
				private static final Object fileLock = new Object();</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-2</id>
<rulename>DC_DOUBLECHECK</rulename>
<description>这个方法可能包含一个被双重检查锁定住的实例。根据java内存模型的语义分析是不正确的用法。详情请见：http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-27</id>
<rulename>RU_INVOKE_RUN</rulename>
<description>这种方法显式调用一个对象的run()。一般来说，类是实现Runnable接口的，因为在一个新的线程他们将有自己的run（）方法，在这种情况下Thread.start（）方法调用是正确的。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-17</id>
<rulename>LI_LAZY_INIT_UPDATE_STATIC</rulename>
<description>这种方法包含一个不同步延迟初始化的静态字段。之后为字段赋值，对象存储到该位置后进一步更新或访问。字段后尽快让其他线程能够访问。如果该方法的进一步访问该字段为初始化对象提供服务，然后你有一个非常严重的多线程bug，除非别的东西阻止任何其他线程访问存储的对象，直到它完全初始化。即使你有信心，该方法是永远不会被多个线程调用时，在它的值还没有被充分初始化或移动，不把它设定为static字段时它可能会更好。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-39</id>
<rulename>VO_VOLATILE_INCREMENT</rulename>
<description>volatile的自增操作不是原子的，如果同时有多个线程同时调用这个字段，增量就会出问题</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-25</id>
<rulename>RS_READOBJECT_SYNC</rulename>
<description>序列化类中定义了同步的readObject()。通过定义，反序列化创建的对象只有一个线程可以访问，因此没有必要的readObject()进行同步。如果的readObject()方法本身造成对象对另一个线程可见，那么这本身就是不好的编码方式。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-15</id>
<rulename>JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT</rulename>
<description>util.concurrent提供了await(), signal(), signalAll() 等方法，比如Condition 接口是 Object 中 wait() 和 notify() 方法的具体化。Lock 中的一个方法是 newCondition()，它要求锁定向该锁定返回新的 Condition 对象限制。await()、signal() 和 signalAll() 方法类似于 wait()、notify() 和 notifyAll()，但增加了灵活性，每个 Lock 都可以创建多个条件变量。这简化了一些并发算法的实现。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-37</id>
<rulename>UL_UNRELEASED_LOCK_EXCEPTION_PATH</rulename>
<description>方法获得了当前的对象锁，但是在所有的异常处理中始终没有释放它。一个正确的示例如下：
				Lock l = ...;
				l.lock();
				try {
					// do something
				} finally {
					l.unlock();
			}</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-29</id>
<rulename>SP_SPIN_ON_FIELD</rulename>
<description>方法无限循环读取一个字段。编译器可合法悬挂宣读循环，变成一个无限循环的代码。这个类应该改变，所以使用适当的同步（包括等待和通知要求）</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-19</id>
<rulename>ML_SYNC_ON_UPDATED_FIELD</rulename>
<description>对象获取一个可变字段时进行同步。这是没有意义的，因为不同的线程可以在不同的对象同步。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-30</id>
<rulename>STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE</rulename>
<description>因为Calendar在使用多线程的情况下是天生不安全的，因此发出关于java.util.Calendar或java.text.DateFormat类型（及其子类）的静态字段的警报</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-20</id>
<rulename>MSF_MUTABLE_SERVLET_FIELD</rulename>
<description>一个web服务一般只能创建一个servlet或者jsp的实例（例如：treates是一个单例类），它会被多个线程调用这个实例的方法服务于多个同时的请求。因此使用易变的字段属性产生竞争的情况。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-42</id>
<rulename>WS_WRITEOBJECT_SYNC</rulename>
<description>这个类有一个writeObject()方法是同步的，但是这个类中没有其他的同步方法。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-40</id>
<rulename>VO_VOLATILE_REFERENCE_TO_ARRAY</rulename>
<description>声明一个变量引用数组，这可能不是你想要的。如果一个变量引用数组，那么对引用数组的读和写都是不安全的，但是数组元素不是变量。取得数组的变量值你可以使用java.util.concurrent包中的数组的原子性特性</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-12</id>
<rulename>IS_FIELD_NOT_GUARDED</rulename>
<description>此字段被标注为net.jcip.annotations.GuardedBy或javax.annotation.concurrent.GuardedBy，但可以在某种程度上违反注释而去访问。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-34</id>
<rulename>SWL_SLEEP_WITH_LOCK_HELD</rulename>
<description>当持有对象时调用Thread.sleep()。这可能会导致很差的性能和可扩展性，或陷入死锁，因为其他线程可能正在等待获得锁。调用wait（）是一个更好的主意，释放对象的持有以允许其他线程运行。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-24</id>
<rulename>NO_NOTIFY_NOT_NOTIFYALL</rulename>
<description>调用notify()而不是notifyAll()方法。Java的监控器通常用于多个条件。调用notify()只唤醒一个线程，这意味着该线程被唤醒只是满足的当前的唯一条件。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-10</id>
<rulename>ESync_EMPTY_SYNC</rulename>
<description>该代码包含一个空的同步块：synchronized(){}</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-32</id>
<rulename>STCAL_STATIC_CALENDAR_INSTANCE</rulename>
<description>Calendar在多线程中本身就是不安全的，如果在线程范围中共享一个Calendarde实例而不使用一个同步的方法在应用中就会出现一些奇怪的行为。在sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate()中会抛出ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions异常。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-22</id>
<rulename>MWN_MISMATCHED_WAIT</rulename>
<description>此方法调用Object.wait()而没有获取到该对象的对象锁。调用wait()而没有持有该对象的对象锁，将导致IllegalMonitorStateException异常。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-44</id>
<rulename>WA_NOT_IN_LOOP</rulename>
<description>这种方法包含调用java.lang.Object.wait()，而这并不是一个循环。如果监视器用于多个条件，打算调用wait()方法的条件可能不是实际发生的。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-6</id>
<rulename>DL_SYNCHRONIZATION_ON_SHARED_CONSTANT</rulename>
<description>同步String类型对象，被占用。
				private static String LOCK = "LOCK";
				...
				  synchronized(LOCK) { ...}
				...
				同步String类型的常量时，由于它被JVM中多个其他的对象所共有，这样在其他代码中会引起死锁。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-4</id>
<rulename>DL_SYNCHRONIZATION_ON_BOOLEAN</rulename>
<description>该代码同步一个封装的原始常量，例如一个Boolean类型。
				private static Boolean inited = Boolean.FALSE;
				...
				  synchronized(inited) {
					if (!inited) {
					   init();
					   inited = Boolean.TRUE;
					   }
					 }
				...
			由于通常只存在两个布尔对象，此代码可能是同步的其他无关的代码中相同的对象，这时会导致反应迟钝和可能死锁。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-8</id>
<rulename>DM_MONITOR_WAIT_ON_CONDITION</rulename>
<description>方法中以java.util.concurrent.locks.Condition对象调用wait（）。等待一个条件发生时应该使用在Condition接口中定义的await()方法。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-1</id>
<rulename>AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION</rulename>
<description>这段代码包含并发抽象的调用序列，这些调用可能不是原子性的执行。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-16</id>
<rulename>LI_LAZY_INIT_STATIC</rulename>
<description>这种方法包含了一个不同步延迟初始化的非volatile静态字段。因为编译器或处理器可能会重新排列指令，如果该方法可以被多个线程调用，线程不能保证看到一个完全初始化的对象。你可以让字段可变来解决此问题</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-38</id>
<rulename>UW_UNCOND_WAIT</rulename>
<description>方法中包含调用java.lang.Object.wait()，而却没有放到条件流程控制中。该代码应确认条件尚未满足之前等待;先前任何通知将被忽略。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-28</id>
<rulename>SC_START_IN_CTOR</rulename>
<description>在构造函数中启动一个线程。如果类曾经被子类扩展过，那么这很可能是错的，因为线程将在子类构造之前开始启动。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-14</id>
<rulename>JLM_JSR166_UTILCONCURRENT_MONITORENTER</rulename>
<description>在util.concurrent实例上执行同步方法，实际上无需这样做。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-36</id>
<rulename>UL_UNRELEASED_LOCK</rulename>
<description>方法获得了当前的对象锁，但是在方法中始终没有释放它。一个正确的示例如下：
				Lock l = ...;
				l.lock();
				try {
					// do something
				} finally {
					l.unlock();
				}</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-26</id>
<rulename>RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED</rulename>
<description>忽略putIfAbsent方法的返回值，重用传入putIfAbsent方法的参数值</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>6-18</id>
<rulename>ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD</rulename>
<description>作用在字段上的同步是没有意义的。这段代码在字段上做了同步用以防止字段被同步修改，然而同步锁是需要建立在该字段的引用对象上而不是该字段。</description>
<ruletype>多线程</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>1-9</id>
<rulename>ClassCastExceptionWithToArray</rulename>
<description>如果你想从一个枚举类型中得到某个类型的数组，你应该传给 toArray()方法一个目的类型的数组作为参数，否则你可能得到一个类型转换错误 。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-1</id>
<rulename>JumbledIncrementer</rulename>
<description>避免混乱的循环增量-它常常是一个错误，而且容易让人迷惑。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-5</id>
<rulename>ReturnFromFinallyBlock</rulename>
<description>避免从 finally 块中返回 - 这会导致异常捕获后又被抛弃。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>1-19</id>
<rulename>ExtendsObject</rulename>
<description>不用明确的继承Object.</description>
<ruletype>代码规范</ruletype>
<priority>4</priority>
</pass>
<pass>
<id>1-39</id>
<rulename>StringBufferInstantiationWithChar</rulename>
<description>StringBuffer使用字符初始化：StringBuffer sb = new StringBuffer('c');字符c会转换为int值，作为StringBuffer的初始化大小参数。</description>
<ruletype>代码规范</ruletype>
<priority>4</priority>
</pass>
<pass>
<id>1-23</id>
<rulename>DontUseFloatTypeForLoopIndices</rulename>
<description>不要使用浮点循环条件。如果你必须使用浮点数，除非你确定浮动提供了足够的精度和你有一个令人信服的性能的需要（时间或空间）。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-31</id>
<rulename>UnnecessaryCaseChange</rulename>
<description>使用equalsIgnoreCase()比将字符串大小写转换一致后再比较要快。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-43</id>
<rulename>FinalizeOnlyCallsSuperFinalize</rulename>
<description>如果finalize()被实现，它应该除了调用super.finalize()之外还应该做点别的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-15</id>
<rulename>AvoidUsingOctalValues</rulename>
<description>整型字面量不要以 0 开头， 0 意味着之后的值要被解释为一个八进制值。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-59</id>
<rulename>ProperCloneImplementation</rulename>
<description>对象的clone()方法中应该包含super.clone()实现。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-47</id>
<rulename>AvoidCallingFinalize</rulename>
<description>Object.finalize()是由垃圾收集器发现没有引用指向这个对象的时候调用的，应尽量避免人为调用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-62</id>
<rulename>DoNotExtendsAsyncTask</rulename>
<description>不能自己实现AsyncTask，请使用已经实现了的类：SafeAsyncTask。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-30</id>
<rulename>InefficientStringBuffering</rulename>
<description>避免在StringBuffer的构造器或append()方法中连接非常量类型。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-50</id>
<rulename>EmptyWhileStmt</rulename>
<description>发现空的while表达式，如果是一个定时的循环，你应该在循环体内使用 Thread.sleep()；如果是对于退出处理做的一个处理大量事情的while循环，重写代码使它更清晰。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-4</id>
<rulename>DoubleCheckedLocking</rulename>
<description>在 JAVA 中有时候创建的对象是通过双重检查机制获取的，一个优化的 JRE 可能在真正创建对象之前先将指向这个对象的引用赋给一个变量。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>1-18</id>
<rulename>AvoidMultipleUnaryOperators</rulename>
<description>避免使用多重的一元运算符：使用多重的一元运算符可能是一个 bug ，并且可能令人迷惑。检查确保你的用法不是一个 bug ，或者考虑简化表达。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-22</id>
<rulename>DontCallThreadRun</rulename>
<description>显式的调用线程。run()方法将在调用者的线程上执行控制。 应使用 Thread.start()启动一个线程。</description>
<ruletype>代码规范</ruletype>
<priority>4</priority>
</pass>
<pass>
<id>1-34</id>
<rulename>ConsecutiveLiteralAppends</rulename>
<description>连接字符串时连续的调用StringBuffer的append()方法。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-42</id>
<rulename>EmptyFinalizer</rulename>
<description>如果finalize()方法是空的，那么它就不需要存在。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-10</id>
<rulename>AvoidDecimalLiteralsInBigDecimalConstructor</rulename>
<description>避免在BigDecimal类型的构造方法中用小数类型的字面量：
					人们常常以为 ”new BigDecimal(0.1)” 能精确等于 0.1,其实不然，它等于"0. 1000000000000000055511151231257827021181583404541015625"，
					这种状况的原因是 0.1 不能精确的表示双精度类型，因此，传入构造器的 long 类型不等于 0.1 ，
					而传入 String 类型的构造器 new BigDecimal(“0.1”) 可以精确等于 0.1, 故推荐这种情形时用 String 类型的构造器。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-54</id>
<rulename>EmptySynchronizedBlock</rulename>
<description>避免空的 synchronized 块 - 它们是无用的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-26</id>
<rulename>DoNotHardCodeSDCard</rulename>
<description>使用Environment.getExternalStorageDirectory()代替"/sdcard"路径</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>1-38</id>
<rulename>UselessStringValueOf</rulename>
<description>调用append()方法时不需要把参数用valueOf()转换一次，直接将非String类型的值作为参数放在append()里面。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-46</id>
<rulename>FinalizeShouldBeProtected</rulename>
<description>如果你覆盖finalize()，应该使其是protected的，如果作为public的，其它类就可以调用了。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-58</id>
<rulename>EmptyStaticInitializer</rulename>
<description>空的静态初始化没有目的，应该被删除。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-7</id>
<rulename>BooleanInstantiation</rulename>
<description>避免实例化一个布尔对象；用指向 Boolean.TRUE,Boolean.FALSE 或 Boolean.valueOf()的引用代替。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-41</id>
<rulename>AvoidStringBufferField</rulename>
<description>StringBuffer类型变量可以变得非常庞大，所以可能造成内存泄漏。（如果宿主类有很长的生命期）</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-61</id>
<rulename>CloneMethodMustImplementCloneable</rulename>
<description>如果类实现Cloneable接口，clone()方法应该被实现为一个final的方法并且只抛出CloneNotSupportedException的异常。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-3</id>
<rulename>OverrideBothEqualsAndHashcode</rulename>
<description>同时重写 equals()和 hashCode()方法：要么全部重写这两个方法，要么全部不重写。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-17</id>
<rulename>CheckResultSet</rulename>
<description>总是需要检查 ResultSet对象的导航方法（ next,previous,first,last ）的返回 , 事实上，如果返回 false ，开发者需要处理它。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-29</id>
<rulename>StringToString</rulename>
<description>避免对字符串对象调用toString()方法，这是不必要的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-45</id>
<rulename>FinalizeDoesNotCallSuperFinalize</rulename>
<description>如果finalize()方法被重新实现，它最后一个动作应该是调用super.finalize();</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-53</id>
<rulename>EmptySwitchStatements</rulename>
<description>避免空的 switch表达式。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-21</id>
<rulename>AvoidBranchingStatementAsLastInLoop</rulename>
<description>使用一个分支语句作为一个循环的最后一个部分可能是一个错误或是混乱的。确保不是一个错误或考虑使用另一种方法。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>1-37</id>
<rulename>InsufficientStringBufferDeclaration</rulename>
<description>如果不能在事前声明合适大小的StringBuffer容量可能导致运行期不断地重新分配大小。本规则检查字符事实上传递给StringBuffer.append()，但是表明了在最坏情况下的最好的预测。空参数的StringBuffer构造器默认将对象初始化为16个字符的容量。这个默认情况是在构造长度无法确定的情况下假定的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-13</id>
<rulename>BrokenNullCheck</rulename>
<description>如果自身抛出空指针异常空检查就会遭到破坏，比如你使用 ||代替 &amp;&amp;，反之亦然，如（应是&amp;&amp;）：if (string!=null || !string.equals("")){}。</description>
<ruletype>代码规范</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>1-57</id>
<rulename>EmptyStatementBlock</rulename>
<description>空的块语句没有目的，应该被删除。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-6</id>
<rulename>UnconditionalIfStatement</rulename>
<description>当表达式总是为真或总为假时，不要用 if。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-52</id>
<rulename>EmptyFinallyBlock</rulename>
<description>避免空的 finally 块 - 这些是可以删掉的。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-60</id>
<rulename>CloneThrowsCloneNotSupportedException</rulename>
<description>clone()方法应该抛出CloneNotSupportedException</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-2</id>
<rulename>ForLoopShouldBeWhileLoop</rulename>
<description>有些for循环可以简化为 while循环-这样可以更加简明。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-28</id>
<rulename>StringInstantiation</rulename>
<description>避免初始化字符串对象；这是不必要的。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>1-44</id>
<rulename>FinalizeOverloaded</rulename>
<description>方法名是finalize()的方法应该具有参数。因为不带参数容易令人迷惑且可能是一个bug，那样就不会被JVM调用。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-12</id>
<rulename>AvoidThreadGroup</rulename>
<description>避免使用线程组；虽然线程组可以被用于多线程环境中，但它包含的方法不是线程安全的。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>1-56</id>
<rulename>EmptyInitializer</rulename>
<description>发现空的初始化块。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>1-20</id>
<rulename>CheckSkipResult</rulename>
<description>skip()方法可能跳过的实际字节数比需求的字节数少，因此需要检查它返回的值来得到实际跳过的字节数。</description>
<ruletype>代码规范</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>1-32</id>
<rulename>UseStringBufferLength</rulename>
<description>使用StringBuffer对象的length()方法来计算StringBuffer对象的长度，而不是使用StringBuffer.toString().equals("") or StringBuffer.toString().length() ==.等方法。</description>
<ruletype>代码规范</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>2-7</id>
<rulename>NotificationRule</rulename>
<description>NotificationManage每次调用notify()方法时需要新建一个RemoteViews</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>2-10</id>
<rulename>OS_OPEN_STREAM_EXCEPTION_PATH</rulename>
<description>OS_OPEN_STREAM_EXCEPTION_PATH使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>2-11</id>
<rulename>OBL_UNSATISFIED_OBLIGATION</rulename>
<description>OBL_UNSATISFIED_OBLIGATION使用后的资源对象没有在finally中进行关闭。请确保使用java.io.InputStream，java.io.OutputStream，java.io.Reader，java.io.Writer，java.util.zip.ZipFile，java.sql.Connection，java.sql.Statement，java.sql.ResultSet以上这些类创建的对象在finally中进行了妥善的关闭处理。
						推荐使用apache开源类（IOUtils，dbutils）中的closeQuietly()方法关闭资源对象。</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>2-6</id>
<rulename>ContextSoftReferenceRule</rulename>
<description>在callback函数参数中的Context或Activity建议使用SoftReference或 WeakReference</description>
<ruletype>内存类</ruletype>
<priority>3</priority>
</pass>
<pass>
<id>2-5</id>
<rulename>ContextRule</rulename>
<description>Context尽量使用 ApplicationContext而不要使用ActivityContext</description>
<ruletype>内存类</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>2-4</id>
<rulename>ParcelRecycleRule</rulename>
<description>Parcel使用后需要recycle</description>
<ruletype>内存类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>2-3</id>
<rulename>BitmapRecycleRule</rulename>
<description>Bitmap使用后需要recycle</description>
<ruletype>内存类</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>3-2</id>
<rulename>LogAssignmentRule</rulename>
<description>不要在Log方法中对变量进行赋值操作。</description>
<ruletype>日志类</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>3-1</id>
<rulename>LogBlockRule</rulename>
<description>Log中不要输出敏感信息,例如pid、uid、imei号等。</description>
<ruletype>日志类</ruletype>
<priority>0</priority>
</pass>
<pass>
<id>4-9</id>
<rulename>DDosBlockRule</rulename>
<description>在获取intent里的数据时未做异常处理，会导致程序崩溃退出。</description>
<ruletype>安全类</ruletype>
<priority>0</priority>
</pass>
<pass>
<id>4-10</id>
<rulename>IntentSchemeRule</rulename>
<description>AndroidManifest.xml文件中存在Intent scheme远程调用导致数据泄露风险，请安全部门人员进行更进一步审查。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>4-11</id>
<rulename>CheckIntentParseUriRule</rulename>
<description>应用使用了Intent.parseUri()函数,有可能导致远程拒绝服务、远程提权等攻击,给出安全风险提示。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>4-14</id>
<rulename>FragmentRule</rulename>
<description>导出的Activity组件继承了PreferenceActivity，并且没有重写PreferenceActivity.isValidFragment方法给出安全漏洞警告，禁止对外发布。</description>
<ruletype>安全类</ruletype>
<priority>0</priority>
</pass>
<pass>
<id>4-3</id>
<rulename>ActivityExportedOverMuchRule</rulename>
<description>AndroidManifest.xml文件中组件导出过多，请安全部门人员进行更进一步审查。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>4-2</id>
<rulename>SharedPerferenceDataRule</rulename>
<description>用SharedPreference来保存数据时，对于敏感信息的key尽量使用缩写或者其他不易知其意的命名，比如：KEY_PHONENUMBER, KEY_SERVER_IP_ADDRESS，应该改为KEY_P_N, KEY_S_I_A等。</description>
<ruletype>安全类</ruletype>
<priority>0</priority>
</pass>
<pass>
<id>4-1</id>
<rulename>WebViewRule</rulename>
<description>使用Webview的时候需要将setAllowFileAccess()和setJavaScriptEnabled()置为false来禁止文件系统访问，禁止对JavaScript的支持。</description>
<ruletype>安全类</ruletype>
<priority>0</priority>
</pass>
<pass>
<id>4-13</id>
<rulename>DebuggableRule</rulename>
<description>AndroidManifest.xml中显式设置android:debuggable="true"时，应用程序可被调试。</description>
<ruletype>安全类</ruletype>
<priority>1</priority>
</pass>
<pass>
<id>4-7</id>
<rulename>protectionLevelRule</rulename>
<description>自定义权限没有设置protectionLevel或设置为normal，对于敏感权限，建议设置为signature或者signatureOrSystem。</description>
<ruletype>安全类</ruletype>
<priority>2</priority>
</pass>
<pass>
<id>4-5</id>
<rulename>OpenFileRule</rulename>
<description>扫描到应用provider组件导出，且没有做权限限制，组件重写了ContentProvider.openFile()函数，却没有调用File.getCanonicalPath()函数进行过滤，存在安全隐患。</description>
<ruletype>安全类</ruletype>
<priority>0</priority>
</pass>
</passes>
</redline>
